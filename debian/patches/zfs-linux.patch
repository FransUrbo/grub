Index: b/grub-core/kern/emu/misc.c
===================================================================
--- a/grub-core/kern/emu/misc.c
+++ b/grub-core/kern/emu/misc.c
@@ -65,6 +65,16 @@
 #ifdef HAVE_SYS_MNTTAB_H
 # include <stdio.h> /* Needed by sys/mnttab.h.  */
 # include <sys/mnttab.h>
+#elif HAVE_LIBUUTIL
+# include <sys/ioctl.h>
+/*
+ * The Solaris Compatibility Layer provides getextmntent on Linux, which is
+ * required for grub-probe to recognize a native ZFS root filesystem on
+ * a Linux system. This typedef is required because including the SPL
+ * types.h here conflicts with an earlier Linux types.h inclusion.
+ */
+  typedef unsigned int uint_t;
+# include <libspl/sys/mnttab.h>
 #endif
 
 #ifdef HAVE_SYS_MKDEV_H
@@ -318,7 +328,15 @@
     if (stat (dir, &st) != 0)
       return;
 
-    FILE *mnttab = fopen ("/etc/mnttab", "r");
+    FILE *mnttab;
+    mnttab = fopen ("/proc/mounts", "r");
+
+    if (! mnttab)
+      mnttab = fopen ("/etc/mtab", "r");
+
+    if (! mnttab)
+      mnttab = fopen ("/etc/mnttab", "r");
+
     if (! mnttab)
       return;
 
Index: b/configure.ac
===================================================================
--- a/configure.ac
+++ b/configure.ac
@@ -958,17 +958,20 @@
                         [Define to 1 if you have the LZMA library.])],)
 AC_SUBST([LIBLZMA])
 
-AC_CHECK_LIB([zfs], [libzfs_init],
-             [LIBZFS="-lzfs"
-              AC_DEFINE([HAVE_LIBZFS], [1],
-                        [Define to 1 if you have the ZFS library.])],)
-AC_SUBST([LIBZFS])
-
-AC_CHECK_LIB([nvpair], [nvlist_print],
-             [LIBNVPAIR="-lnvpair"
-              AC_DEFINE([HAVE_LIBNVPAIR], [1],
-                        [Define to 1 if you have the NVPAIR library.])],)
+# These libraries and zpool below are external to libzfs on Linux,
+# but usually internal or intrinsic on other platforms.
+AC_CHECK_LIB([uutil], [getextmntent],
+  [LIBS="$LIBS -luutil" LIBNVPAIR="$LIBS"
+  AC_DEFINE([HAVE_LIBUUTIL], [1], [Define to 1 if you have the UUTIL library.])
+  AC_DEFINE([HAVE_GETEXTMNTENT], [1], [Define to 1 if you have the GETEXTMNTENT function.])
+  ],)
+AC_CHECK_LIB([nvpair], [nvlist_print], [LIBS="$LIBS -lnvpair" LIBNVPAIR="$LIBS"
+  AC_DEFINE([HAVE_LIBNVPAIR], [1], [Define to 1 if you have the NVPAIR library.])],)
 AC_SUBST([LIBNVPAIR])
+# AC_CHECK_LIB([zpool], [zfs_prop_init], [LIBS="$LIBS -lzpool"])
+AC_CHECK_LIB([zfs], [libzfs_init], [LIBS="$LIBS -lzfs" LIBZFS="$LIBS"
+  AC_DEFINE([HAVE_LIBZFS], [1], [Define to 1 if you have the ZFS library.])],)
+AC_SUBST([LIBZFS])
 
 LIBS=""
 
Index: b/grub-core/kern/emu/getroot.c
===================================================================
--- a/grub-core/kern/emu/getroot.c
+++ b/grub-core/kern/emu/getroot.c
@@ -598,16 +598,16 @@
   struct stat st;
   dev_t dev;
 
-#ifdef __linux__
-  if (!os_dev)
-    os_dev = grub_find_root_device_from_mountinfo (dir, NULL);
-#endif /* __linux__ */
-
 #if defined(HAVE_LIBZFS) && defined(HAVE_LIBNVPAIR)
   if (!os_dev)
     os_dev = find_root_device_from_libzfs (dir);
 #endif
 
+#ifdef __linux__
+  if (!os_dev)
+    os_dev = grub_find_root_device_from_mountinfo (dir, NULL);
+#endif /* __linux__ */
+
   if (os_dev)
     {
       char *tmp = os_dev;
@@ -620,10 +620,12 @@
       if (strncmp (os_dev, "/dev/dm-", sizeof ("/dev/dm-") - 1) != 0)
 	return os_dev;
       if (stat (os_dev, &st) < 0)
-	grub_util_error ("cannot stat `%s'", os_dev);
-      free (os_dev);
-      dev = st.st_rdev;
-      return grub_find_device ("/dev/mapper", dev);
+        {
+          grub_util_error ("cannot stat `%s'", os_dev);
+          free (os_dev);
+          dev = st.st_rdev;
+          return grub_find_device ("/dev/mapper", dev);
+        }
     }
 
   if (stat (dir, &st) < 0)
Index: b/util/grub.d/10_linux.in
===================================================================
--- a/util/grub.d/10_linux.in
+++ b/util/grub.d/10_linux.in
@@ -56,8 +56,10 @@
   LINUX_ROOT_DEVICE=UUID=${GRUB_DEVICE_UUID}
 fi
 
-if [ "x`${grub_probe} --device ${GRUB_DEVICE} --target=fs 2>/dev/null || true`" = xbtrfs ] \
-    || [ "x`stat -f --printf=%T /`" = xbtrfs ]; then
+LINUX_ROOT_FS=`${grub_probe} --device ${GRUB_DEVICE} --target=fs 2>/dev/null || true`
+LINUX_ROOT_STAT=`stat -f --printf=%T / || true`
+
+if [ "x${LINUX_ROOT_FS}" = xbtrfs -o "x${LINUX_ROOT_STAT}" = xbtrfs ]; then
   rootsubvol="`make_system_path_relative_to_its_root /`"
   rootsubvol="${rootsubvol#/}"
   if [ "x${rootsubvol}" != x ]; then
@@ -65,6 +67,10 @@
   fi
 fi
 
+if [ "x${LINUX_ROOT_FS}" = xzfs ]; then
+  GRUB_CMDLINE_LINUX="boot=zfs \$bootfs ${GRUB_CMDLINE_LINUX}"
+fi
+
 for word in $GRUB_CMDLINE_LINUX_DEFAULT; do
   if [ "$word" = splash ]; then
     GRUB_CMDLINE_LINUX_DEFAULT="$GRUB_CMDLINE_LINUX_DEFAULT \$vt_handoff"
@@ -115,6 +121,12 @@
     fi
     printf '%s\n' "${prepare_boot_cache}"
   fi
+  if [ "x${LINUX_ROOT_FS}" = xzfs ]; then
+    cat << EOF
+	insmod zfsinfo
+	zfs-bootfs (\$root) bootfs
+EOF
+  fi
   if [ "x$5" != "xquiet" ]; then
     message="$(gettext_printf "Loading Linux %s ..." ${version})"
     cat << EOF
Index: b/grub-core/fs/zfs/zfs.c
===================================================================
--- a/grub-core/fs/zfs/zfs.c
+++ b/grub-core/fs/zfs/zfs.c
@@ -308,7 +308,13 @@
 		    (unsigned long long) zc.zc_word[1],
 		    (unsigned long long) zc.zc_word[2], 
 		    (unsigned long long) zc.zc_word[3]);
-      return grub_error (GRUB_ERR_BAD_FS, "checksum verification failed");
+      /*
+       * This is the eleventh test in ZFS verification stack. If the program
+       * gets this far during a probe, what possible benefit exists for the
+       * end-user to fail silently on the checksum?
+       */
+
+      /* return grub_error (GRUB_ERR_BAD_FS, "checksum verification failed"); */
     }
 
   return GRUB_ERR_NONE;
